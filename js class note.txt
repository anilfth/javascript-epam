.->Date- 23--2-23 
   Rest operator ==> (...args)
notation same both for rest and spread(...args)
****************************************spread operator-->******************************************************************************************************
 The spread operator is represented by three consecutive dots (...) and is used to spread the contents of an array or an object into 
another array or object. 

const arr1 = [1, 2, 3];
const arr2 = [4, 5, 6];

const concatenatedArr = [...arr1, ...arr2];

console.log(concatenatedArr); // [1, 2, 3, 4, 5, 6]


********************************REST OPERATOR**************************************************************************
The rest operator is also represented by three consecutive dots (...) and is used to gather the remaining arguments passed to a function into an array
. Here is an example of using the rest operator to sum up multiple arguments:

function sum(...args) {
  return args.reduce((total, num) => total + num);
}

console.log(sum(1, 2, 3, 4)); // 10






-> *************************************************************call back function n javascript***************************************************

A callback is a function passed as an argument to another function

This technique allows a function to call another function

A callback function can run after another function has finished

**********************************************Array.prototype.reduce()******************************************************************

The reduce() method executes a user-supplied "reducer" callback function on each element of the array, in order, passing in the return value from the 
calculation on the preceding element. The final result of running the reducer across all elements of the array is a single value.

**********************************difference btw spread operator and rest operator*****************************************************************************
Spread syntax "expands" an array into its elements, while rest syntax collects multiple elements and "condenses" them into a single element

********************************Time 03 to 04 pm****************************************************

*************************************************************Hoisting in javascript**********************************************************



******************************************************** Scope i javascript ****************************************************************************************


***************************************************function declartion vs function expression************************************************************


*******************************Named function expression********************************************************************************


***********************************IIFA*******************

**************************DOM********************
*************recursion in javascript ***************


**********************DOM Events***********************************
event.bubling
event capturing
event handlers
.addEventsListener
removed EventListener

*****************************Event delagation************************************


****************************asynchronous and synchronous difference in javascript********************************
-> Synchronous JavaScript:  means to be in a sequence, i.e. every statement of the code gets executed one by one. So, basically a statement has to
 wait for the earlier statement to get executed.
->Asynchronous JavaScript: Asynchronous code allows the program to be executed immediately where the synchronous code will block
 further execution of the remaining code until it finishes the current one. This may not look like a big problem but when you see it in a bigger picture 
you realize that it may lead to delaying the User Interface.

**************************************Event Loop*******************************************
console.log('Start script...');

setTimeout(() => {
    task('Download a file.');
}, 1000);

console.log('Done!');

-> The event loop is a constantly running process that monitors both the callback queue and the call stack.
-> Promises.->  A unique JavaScript object that allows us to perform asynchronous operations
-> A callback function executes when an asynchronous operation completesby 
-> JavaScript maintains a queue of callback functions. It is called a callback queue or task queue. A queue data structure is First-In-First-Out(FIFO). 
So, the callback function that first gets into the queue has the opportunity to go out first

********************* browser object model*************************************************

************************local and seesion storage**********************************************
.web storage--> web storage api provides mechanisms which browsers can securely store key/value pairs.
storage elements are simple key values stores(Strings)
 or  
1.web storage; better than cookies
2. web storage, web applications can store data locally within the user's browser
*******Web Storage Objects*****
1.window.localStorage ->The localStorage object stores the data with no expiration date. The data will not be deleted when the browser is closed, and will be available the next day, week, or year
if (typeof(Storage) !== "undefined") {
  // Code for localStorage/sessionStorage.
} else {
  // Sorry! No Web Storage support..
}
2.window.sessionStorage -> The sessionStorage object is equal to the localStorage object, except that it stores the data for only one session. The data is deleted when the user closes the specific browser tab.

*****************************************regular expression in javascript*************************************************

  **************************************************8 06/03/2023******************************

***********************Date in javaScript***********************************************************

********task ************ subitted after holi-->
create a countdown timer like stop watch

*******************************oops in javascript**************************************
object = data +behavior
1. encapsulation
2. inheritance--> 1 single inheritance 2. multi level  inheritance 3. multiple inheritance
3. polymorphism
4.this keyword--> use in constructor 2.
5. super keyword
6.
*************************************json in javascript***********************************
*******************************promises********************************
a promises is an object representing the eventually
completion or failure of an asynchronous operation
a promises is a returned object to which you attach callback
instead of passing callback into a function.
1.callback hell


****************************************** FETCH () API date(23/03/2023)**********************************************************************************************************************************************

************************************************async await(23/03/2023)************************************************************************************************
********************************************************node.js************************************************


***********************************************express js************************************************************
   1.) nodemode in express js
2.) npm run div start --> when we start our projects
